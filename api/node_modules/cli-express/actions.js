const chalk = require("chalk");
const fs = require("fs-extra");
const path = require("path");
const inquirer = require("inquirer").default;

const { createResource, configQuestions } = require("./helpers");

const config = fs.readJsonSync(path.join(__dirname, 'config.json'));
const resourceData = config.resources;
const basePath = config.basePath;
const folders = config.folders;

function actionErrorHanlder(error) {
    console.error(chalk.red.bold(error.message));
}

exports.actionRunner = function (fn) {
    return (...args) => fn(...args).catch(actionErrorHanlder);
}

exports.configAction = async () => {
    console.log();
    console.log(chalk.white.bgBlue.bold('These are the current configuration data: '));
    console.log();
    console.log(chalk.white.bgGray.bold('Base path:'), config.basePath);
    console.log(chalk.white.bgGray.bold('Folders:'));
    console.log(chalk.white.bold('  🗂️ Models:'), config.folders.models);
    console.log(chalk.white.bold('  🗂️ Controllers:'), config.folders.controllers);
    console.log(chalk.white.bold('  🗂️ Routes:'), config.folders.routes);
    console.log();

    const data = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: 'Do you want to modify this configuration?',
            default: false
        }
    ]);

    if (data.confirm) {
        const configData = await inquirer.prompt(configQuestions);

        resourceData.model.path = configData.models;
        resourceData.controller.path = configData.controllers;
        resourceData.route.path = configData.routes;

        folders.models = configData.models;
        folders.controllers = configData.controllers;
        folders.routes = configData.routes;

        const config = { resources: resourceData, folders, basePath: configData.basePath };
        fs.writeJsonSync(path.join(__dirname, 'config.json'), config);
    }
}

exports.generateAction = async (action, options) => {
    const { name } = await inquirer.prompt([
        {
            type: 'text',
            name: 'name',
            message: `What is the name of the ${action === 'all' ? 'resource' : action}?`,
        },
    ]);

    if (!name.trim()) {
        console.log(chalk.red.bold('The name cannot be empty. Operation cancelled.'));
        return;
    }

    const creationSummary = [];
    if (action === 'all' || action === 'model') {
        creationSummary.push(`Model: ${path.join(basePath, folders.models, `${name}.model.js`)}`);
    }
    if (action === 'all' || action === 'controller') {
        creationSummary.push(`Controller: ${path.join(basePath, folders.controllers, `${name}.controller.js`)}`);
    }
    if (action === 'all' || action === 'route') {
        creationSummary.push(`Route: ${path.join(basePath, folders.routes, `${name}.routes.js`)}`);
    }

    // Show the summary and ask for confirmation
    console.log(chalk.yellow.bold('\nResources summary to create:'));
    creationSummary.forEach(item => console.log(chalk.white(`- ${item}`)));

    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: 'Do you want to proceed with the creation of these resources?',
            default: true
        }
    ]);

    if (!confirm) {
        console.log(chalk.red.bold('Operation cancelled.'));
        return;
    }

    if (action === 'all') {
        for (const resource of Object.values(resourceData)) {
            const data = resource;
            createResource(data, name, basePath);
        }
    } else {
        const data = resourceData[action];
        createResource(data, name, basePath);
    }

    console.log(chalk.green.bold('Resources created successfully.'));
}

exports.initAction = () => {
    console.log('Initializing the project...');
    // Create the necessary folders
    console.log('Creating the project folders...');

    const requiredFolders = [
        folders.models,
        folders.controllers,
        folders.routes,
        'config',
        'middlewares',
        'utils'
    ];

    requiredFolders.forEach(folder => {
        const folderPath = path.join(process.cwd(), `${basePath}/${folder}`);
        if (!fs.existsSync(folderPath)) {
            fs.mkdirSync(folderPath, { recursive: true });
            console.log(`Folder created: ${folder}`);
        } else {
            console.log(`The folder ${folder} already exists.`);
        }
    });

    console.log(chalk.green.bold('Project initialization completed.'));
}