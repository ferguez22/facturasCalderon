const fs = require("fs-extra");
const path = require("path");
const chalk = require("chalk");

const config = require("./config.json");

exports.configQuestions = [
    {
        type: 'text',
        name: 'basePath',
        message: 'Enter the base path',
        default: config.basePath
    },
    {
        type: 'text',
        name: 'models',
        message: 'Enter the models folder name',
        default: config.resources.model.path
    },
    {
        type: 'text',
        name: 'controllers',
        message: 'Enter the controllers folder name',
        default: config.resources.controller.path
    },
    {
        type: 'text',
        name: 'routes',
        message: 'Enter the routes folder name',
        default: config.resources.route.path
    }
];

exports.createResource = async (data, name, basePath) => {

    if (!fs.existsSync(path.join(process.cwd(), `${basePath}/${data.path}`))) {
        fs.mkdirSync(path.join(process.cwd(), `${basePath}/${data.path}`), { recursive: true });
    }

    const fullPath = path.join(process.cwd(), basePath, data.path);
    const directories = name.split(path.sep);
    directories.pop();
    let currentPath = path.join(process.cwd(), basePath, data.path);

    for (const dir of directories) {
        currentPath = path.join(currentPath, dir);
        if (!fs.existsSync(currentPath)) {
            fs.mkdirSync(currentPath);
        }
    }

    const filePath = path.join(process.cwd(), `${basePath}/${data.path}`, `${name}.${data.name}.js`);
    if (fs.existsSync(filePath)) {
        console.log(chalk.yellow.bold(`The file ${name}.${data.name}.js already exists. It will not be overwritten.`));
        return;
    }

    fs.writeFileSync(path.join(process.cwd(), `${basePath}/${data.path}`, `${name}.${data.name}.js`), '');

    if (data.template) {
        fs.copyFileSync(path.join(__dirname, `templates/${data.template}`), path.join(process.cwd(), `${basePath}/${data.path}`, `${name}.${data.name}.js`));
    }
}

exports.checkExpressProject = (thisCommand, actionCommand) => {
    const packageJson = fs.readJsonSync("package.json");
    if (!packageJson.dependencies.express) {
        console.log(chalk.white.bgRed.bold('You should run this command in an Express.js project'));
        process.exit(1);
    }
    return thisCommand.opts().express = true;
}